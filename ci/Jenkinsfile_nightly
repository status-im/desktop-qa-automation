#!/usr/bin/env groovy
library 'status-jenkins-lib@v1.7.13'

pipeline {
  agent {
    label 'linux && x86_64 && qt-5.15.2'
  }

  environment {
    QT_QPA_PLATFORMTHEME = "qt5ct"
    QT_LOGGING_DEBUG = 1
    QT_DEBUG_PLUGINS = 1

    SQUISH_DIR = "/opt/squish-runner-7.1-20230222-1555"
    PYTHONPATH = "${SQUISH_DIR}/lib:${SQUISH_DIR}/lib/python:${PYTHONPATH}"
    LD_LIBRARY_PATH = "${SQUISH_DIR}/lib:${SQUISH_DIR}/python3/lib:${LD_LIBRARY_PATH}"
  }

  options {
    timestamps()
    /* Prevent Jenkins jobs from running forever */
    timeout(time: 120, unit: 'MINUTES')
    /* manage how many builds we keep */
    buildDiscarder(logRotator(
      numToKeepStr: '10',
      daysToKeepStr: '30',
      artifactNumToKeepStr: '3',
    ))
  }

  stages {

    stage('Download') {
      steps { script {
        copyArtifacts(
          projectName: "status-desktop/systems/linux/x86_64/package/",
          filter: 'pkg/*-x86_64.tar.gz',
          selector: lastWithArtifacts(),
          target: "${env.WORKSPACE}/tmp"
        )
        def pkg_path = "${env.WORKSPACE}/${utils.findFile('tmp/pkg/*-x86_64.tar.gz')}"
        sh "tar -zxvf '${pkg_path}' -C '${env.WORKSPACE}/tmp'"
        env.APP_DIR = "${env.WORKSPACE}/${utils.findFile('tmp/*.AppImage')}"
      } }
    }

    stage('Setup') {
      steps { script {
        sh 'pip3 install --user -r requirements.txt'
      } }
    }

    stage('Test') {
      steps { wrap([
        $class: 'Xvfb',
        autoDisplayName: true,
        parallelBuild: true,
        screen: '1920x1080x24',
        additionalOptions: '-dpi 1'
      ]) { script {
        sh "fluxbox &"
        sh "cp -f '${env.WORKSPACE}'/configs/_local.py.ci '${env.WORKSPACE}'/configs/_local.py"
        sh "python3 -m pytest --disable-warnings --alluredir=${env.WORKSPACE}/allure-results"
      }}}
    }
  }
  post {
    always { script {
      allure([
        jdk: '',
        properties: [],
        results: [[path: 'allure-results']],
        reportBuildPolicy: 'ALWAYS',
      ])
    }}
    cleanup { cleanWs() }
  }
}
